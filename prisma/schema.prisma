// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ciudades{
  id String @id @default(cuid())
  nombre String
}

// Modelo de Usuarios
model Usuario {
  id           String @id
  nombre       String
  email        String   @unique
  password     String
  createdAt    DateTime @default(now())
  reservas     Reserva[] // Relación con las reservas
}

// Modelo de Buses
model Bus {
  placa        String   @id @unique // Placa del bus
  capacidad    Int             // Número total de asientos
  viajes       Viaje[]         // Relación con los viajes
  asientos     Asiento[]       // Relación con los asientos
}

// Modelo de Viajes
model Viaje {
  id           String   @id @default(cuid())
  origen       String           // Lugar de origen
  destino      String           // Lugar de destino
  fechaSalida  DateTime         // Fecha de salida
  fechaLlegada DateTime        // Fecha de llegada (opcional)
  precio       Float            // Precio del viaje
  busId        String           // Relación con el Bus
  bus          Bus     @relation(fields: [busId], references: [placa])
  reservas     Reserva[]        // Relación con las reservas
  createdAt    DateTime @default(now())
}

// Modelo de Asientos
model Asiento {
  id           String   @id @default(cuid())
  numero       Int              // Número del asiento
  estado       String  @default("libre") // Estado: libre, ocupado
  busId        String           // Relación con el Bus
  bus          Bus     @relation(fields: [busId], references: [placa])
  reservas     Reserva[]        // Relación con las reservas
}

// Modelo de Reservas
model Reserva {
  id           String   @id @default(cuid())
  usuarioId    String?           // Relación con el Usuario (opcional)
  usuario      Usuario? @relation(fields: [usuarioId], references: [id])
  viajeId      String            // ID del Viaje
  asientoId    String            // ID del Asiento
  dni          String            // DNI de quien compró el pasaje
  viaje        Viaje   @relation(fields: [viajeId], references: [id])
  asiento      Asiento @relation(fields: [asientoId], references: [id])
  createdAt    DateTime @default(now())
}
